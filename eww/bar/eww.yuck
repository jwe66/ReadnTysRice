(defvar eww "/bin/eww -c $HOME/.config/eww")
(defvar devider "/home/tyt/.config/eww/bar/assets/devider.svg")

;; Launcher Widgets ;;
(defwidget launcher []
  (box    :orientation "v" 
          :space-evenly "false" 
          :spacing -15
          :class "launcher_icon" 
    (eventbox :onclick "scripts/popup launcher" 
      (image    :path "assets/class-hunter 1.svg"
                :image-height 30))))

;; Separator widget ;;
(defwidget separator []
  (box  :orientation "v" 
        :space-evenly "false" 
        :class "separator"
        :halign "center"
        :halign "center"
    (image :path "assets/devider-only-12.svg")))

;; Workspaces Widgets ;;
(deflisten SPACES :initial '{"active":1,"workspaces":[]}' "/bin/bash scripts/workspace")
(defwidget workspaces []
  (box      :class "workspaces"
            :orientation "v"
    (for entry in "${SPACES.workspaces}"
      (button :onclick "sway workspace ${entry.id}"
              :class {"${entry.is_active}" ? "selected" : "workspace-box"}
              :valign "center"
              :halign "center"
        (box    :orientation "v" 
                :space-evenly "false" 
                :valign "center"
                :halign "center"
          "${entry.id}")))))

;; Dashboard ;;
(defwidget dashboard []
  (box    :orientation "v" 
          :space-evenly "false" 
          :style "margin: 5px 0px 0px 0px"
          :spacing -15
    (eventbox :onclick "scripts/popup launcher"
      (image    :path "assets/dashboard-line.svg"
                :image-height 25))))

;; Spotify_Dashboard ;;
(defwidget spt_dashboard []
  (revealer :reveal {tel.isRunning}
    (box    :orientation "v" 
            :space-evenly "false" 
            :spacing -15
            :class "spt_dashboard"
      (eventbox :onclick "/bin/bash -c \"scripts/popup spt ${! spt_spawn}\""
                :timeout "2000ms"
        (overlay
          (progress :class "spt_bar_progress"
                    :orientation "v"
                    :flipped "false"
                    :halign "center"
                    :value {100 * tel.position / tel.length})
          (image  :path {tel.albumArt}
                  :image-height 34))))))


;; Battery Widgets ;;
(defwidget bat []
  (box	  :orientation "v"	
          :space-evenly "false"
          :class "control_font"
          :style "color: ${battery-color};"
    (image  :path "${battery}"
            :class "bat_icon")
	"${battery-cappacity}"))
(defpoll battery			:interval "1s"	"scripts/battery icon")
(defpoll battery-cappacity	:interval "1s"	"scripts/battery percent")
(defpoll battery-color      :interval "1s"	"scripts/battery color")

;; Wifi Widgets ;;
(defwidget wifi []
  (eventbox :tooltip wifi-name
    (box    :orientation "v"
            :class "control_font"
      (image  :path '${wifi-icon}')
      '${wifi-strength}')))
(defpoll wifi-icon      :interval "1s" "scripts/wifi icon")
(defpoll wifi-strength  :interval "1s" "scripts/wifi strength")
(defpoll wifi-name      :interval "1s" "scripts/wifi name")

;; Memory utilization
(defwidget memory []
    (button     :onclick "scripts/btop"
    (box
                :orientation "v"
                :class "control_font"
    (image      :path "assets/stack-line.svg"
                :class "memory-icon")

                "${memory-util}")))
(defpoll memory-util :interval "1s" "scripts/memory")

;; CPU utilizaiton
(defwidget cpu []
    (button     :onclick "scripts/btop"
    (box
                :orientation "v"
                :class "control_font"
    (image      :path "assets/cpu-line.svg"
                :class "cpu-icon")
                "${cpu-util}")))
(defpoll cpu-util :interval "1s" "ps -eo pid,pcpu --sort=-pcpu | awk '{cpu+=$2} END {print cpu/10}' | sed 's/\\..*//'")
;; (defpoll cpu-util :interval "1s" "grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage \"\"}' | sed 's/\\..*//'")

;; Volume Widgets ;;

(defwidget volum []
  (eventbox :onhover "${eww} update volum=true"
            :onhoverlost "${eww} update volum=false"
  (box      :orientation "v"
            :space-evenly "false"
            :spacing "2"
            :style "font-size: 18px; color: #988BC7;"
  (revealer :transition "slideup"
            :reveal volum
            :duration "550ms"
    ;; (better_slider2 :flipped true
    ;;                 :orientation "v"
    ;;                 :timeout "0.1s"
    ;;                 :onchange "echo {} > /tmp/volume_pipe"
    ;;                 :class "volbar"
    ;;                 :min 0
    ;;                 :value 0
    ;;                 :max 101
    ;;                 :width 3
    ;;                 :height 80))
  (scale    :class "volbar"
            :orientation "v"
            :flipped true
            :round-digits 0
            :max 101
            :min 0
            :value current-volume
            :timeout "0.1s"
            :onchange "echo {} > /tmp/volume_pipe"))
  (image    :path "assets/volume-up-line.svg")
            "${current-volume}")))
(defpoll current-volume
            :interval "5s" "amixer -D pulse sget Master | grep 'Left:' |
                                  awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defvar volum false)

;; Control Panel Widgets ;;	
(defwidget control []
	(box :orientation "v"
		 :space-evenly false
		 :class "control"
(volum)
(separator)
(wifi)
(separator)
(memory)
(separator)
(cpu)
(separator)
(bat)
(separator)
(time)
(separator)
))

;; Clock Widgets ;;
(defwidget time []
	(box	:orientation "v" 
			:class "time" 
      :style "margin-top: -10px"
			:valign "center"
  (image    :path "${subclass}"
            :image-height 20
            :style "margin-bottom: -16px;")
	(button	:onclick "thunderbird -calendar"	
            :class "time"
            :style "color: ${timecolor}; margin-bottom: -8px;" hour)
	(button	:onclick "thunderbird -calendar"
            :class "time"
            :style "color: ${timecolor};" min)))
(defpoll hour	    :interval "1s"	"date +%H")
(defpoll min	    :interval "1s"	"date '+%M'")
(defpoll timecolor  :interval "1m"  "scripts/time color")
(defpoll subclass   :interval "1m"  "scripts/time logo")

;; Calendar Widgets ;;
;; (defwidget cal []
;; 	(box :class "cal-box" 
;; 		 :orientation "v"
;; 	(box :class "cal-inner-box"
;; 	(calendar :class "cal" 
;; 			  :day calendar_day 
;; 			  :month calendar_month 
;; 			  :year calendar_year))))
;; (defpoll calendar_day :interval "10h"
;;     "date '+%d'")
;; (defpoll calendar_month :interval "10h"
;;     "month '+%m'")
;; (defpoll calendar_year :interval "10h"
;;     "date '+%Y'")
;;
;; Powermenu Widgets ;;
(defwidget power []
	(box		:orientation "v"					
    (button		:class "button-off"	
				:tooltip "Shutdown"
				:onclick "shutdown now"	"")))

;; Top Widgets ;;
(defwidget top []
	(box	:orientation "v" 
			:space-evenly "false" 
			:valign "start" 
(launcher)
(separator)
(workspaces)
(separator)
(dashboard)
(spt_dashboard)
))

;; Bottom Widgets ;;
(defwidget bottom []
	(box	:orientation "v" 
			:space-evenly false 
(power)))

;; End Widgets ;;
(defwidget end []
	(box :orientation "v" 
		 :space-evenly "false" 
		 :valign "end" 
		 :spacing 5
(control)
(bottom)))

;; Bar Widgets ;;
(defwidget bar []
	(box :class "eww_bar" 
		 :orientation "v" 
		 :vexpand "false" 
		 :hexpand "false"
(top)
(end)))

(defwindow bar
    :class "bar"
    :monitor 0 :exclusive true
    :windowtype "dock"
    :geometry (geometry
        :x "0%"
        :y "0%"
        :width "56px"
        :height "100%"
        :anchor "center left")
    (bar)
)


;; Calendar Windows ;;
;; (defwindow calendar
;; 	:geometry (geometry :x "70px" 
;; 						:y "65%" 
;; 						:width "270px" 
;; 						:height "60px")
;; (cal))
